
import modules ;
import os ;

ECHO "OS =" [ os.name ] ;

BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;

if [ os.name ] = MACOSX
{
	BOOST_ROOT = ./deps/boost ;
}
else if [ os.name ] = NT
{
	BOOST_ROOT = ./deps/boost ;
}
else if [ os.name ] = LINUX
{
	BOOST_ROOT = ./deps/boost ;
}
else
{
	if ! $(BOOST_ROOT)
	{
		BOOST_ROOT = ./deps/boost ;
	}
}

ECHO "BOOST_ROOT =" $(BOOST_ROOT) ;

if $(BOOST_ROOT)
{
	use-project /boost : $(BOOST_ROOT) ;
}

SOURCES =
	alert_manager
	alert
	icmp_manager
	filesystem
	stack_impl
	stack
	tcp_acceptor
	tcp_manager
	tcp_transport
	threat_manager
	threat
	udp_listener
	udp_manager
	utility
;

local usage-requirements = 
	<include>./include
	<include>./opensentinel/include
	<include>./deps
	<include>./deps/asio/include
    <toolset>gcc:<include>$(BOOST_ROOT)
	<toolset>clang-darwin:<include>$(BOOST_ROOT)
	<toolset>darwin:<include>$(BOOST_ROOT)
	<toolset>msvc:<include>$(BOOST_ROOT)

	<toolset>msvc,<variant>debug:<include>$(BOOST_ROOT)/build/debug/include
	<toolset>msvc,<variant>release:<include>$(BOOST_ROOT)/build/release/include
	<variant>release:<define>NDEBUG
	<define>_FILE_OFFSET_BITS=64
	<toolset>msvc:<define>_WIN32_WINNT=0x0501
	<toolset>msvc:<define>_UNICODE
	<toolset>msvc:<define>UNICODE
	<toolset>msvc:<cxxflags>/Zc:wchar_t
	<toolset>msvc:<cxxflags>/Zc:forScope
	<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_WIN32_WINNT=0x0501
	<toolset>msvc:<define>BOOST_ALL_NO_LIB=1
	<toolset>msvc,<variant>release:<linkflags>/OPT:ICF=5
	<toolset>msvc,<variant>release:<linkflags>/OPT:REF
;

project opensentinel ;

lib opensentinel

	: # sources
	src/$(SOURCES).cpp

	: # requirements
	<threading>multi
	$(usage-requirements)

	: # default build
	<link>static

	: # usage requirements
	$(usage-requirements)
	;

